generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PDF {
  id        String   @id @default(cuid())
  title     String
  url       String // Keep for backward compatibility, will be empty for DB-stored PDFs
  fileData  Bytes? // Store PDF file data directly in database
  fileSize  Int? // Store file size in bytes
  mimeType  String   @default("application/pdf")
  createdAt DateTime @default(now())
  chunks    Chunk[]
  quizzes   Quiz[]   @relation("QuizPDFs")
}

model Chunk {
  id        String                      @id @default(cuid())
  content   String
  pageNum   Int
  pdfId     String
  pdf       PDF                         @relation(fields: [pdfId], references: [id])
  embedding Unsupported("vector(768)")?
}

// Enhanced quiz models
model Quiz {
  id        String        @id @default(cuid())
  title     String
  createdBy String?
  createdAt DateTime      @default(now())
  numMcq    Int           @default(0)
  numSaq    Int           @default(0)
  numLaq    Int           @default(0)
  metadata  Json?
  questions Question[]
  attempts  QuizAttempt[]
  pdfs      PDF[]         @relation("QuizPDFs")
}

model Question {
  id             String          @id @default(cuid())
  quizId         String
  qtype          String // 'mcq' | 'saq' | 'laq'
  stem           String
  expectedAnswer String? // for SAQ/LAQ
  guidance       Json? // rubric, keywords etc
  maxScore       Int             @default(4)
  source         Json? // [{pdfId, page, snippet}]
  explanation    String?
  quiz           Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  mcqOptions     McqOption[]
  attemptAnswers AttemptAnswer[]
}

model McqOption {
  id          String   @id @default(cuid())
  questionId  String
  optionIndex Int
  text        String
  isCorrect   Boolean  @default(false)
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model QuizAttempt {
  id         String          @id @default(cuid())
  quizId     String
  userId     String
  startedAt  DateTime        @default(now())
  finishedAt DateTime?
  totalScore Int?
  maxScore   Int?
  metadata   Json?
  quiz       Quiz            @relation(fields: [quizId], references: [id])
  answers    AttemptAnswer[]
}

model AttemptAnswer {
  id         String      @id @default(cuid())
  attemptId  String
  questionId String
  qtype      String
  answerJson Json // {selectedIndex:0} or {text:"..."}
  score      Int?
  maxScore   Int?
  feedback   String?
  attempt    QuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question   Question    @relation(fields: [questionId], references: [id])
}

model UserProgress {
  userId       String   @id
  progressJson Json // e.g. {topic: {attempts: n, avg_score: ..}}
  updatedAt    DateTime @default(now()) @updatedAt
}
